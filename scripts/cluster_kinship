#!/usr/bin/env python

"""
Cluster kinship values according to relatedness info from pedigree.

NOTE: This should output a cluster for every a-priori degree of
relatedness.  For now, it just finds child-parent pairs.
"""

import sys, argparse

import numpy as np

from bl.core.gt.kinship import KinshipBuilder
from bl.core.io.ped import read_ped


def cp_stream(ped):
  """
  Iterate through ped, yielding child-parent pairs.
  """
  for ind in ped.itervalues():
    for role in "father", "mother":
      parent = getattr(ind, role)
      if parent is not None:
        yield ind.id, parent.id


def cp_values_stream(k, ped, id_map):
  for cp in cp_stream(ped):
    try:
      cp = [id_map[id_] for id_ in cp]
    except KeyError:
      pass  # either child or father not included in kinship calculation
    else:
      cp.sort(reverse=True)  # values are in the lower triangular section
      yield k[tuple(cp)]


def make_parser():
  parser = argparse.ArgumentParser(description=__doc__.strip())
  parser.add_argument('k_file', metavar="KINSHIP_FILE")
  parser.add_argument("ped_file", metavar="PED_FILE")
  parser.add_argument("id_file", metavar="ID_FILE")
  parser.add_argument("-o", "--output", metavar="FILE", help="output file")
  return parser


def main(argv):
  parser = make_parser()
  args = parser.parse_args(argv[1:])
  if not args.output:
    args.output = "%s.cp_values" % args.k_file
  with open(args.k_file) as f:
    k = KinshipBuilder.deserialize(f.read())
  with open(args.ped_file) as f:
    ped = read_ped(f)
  with open(args.id_file) as f:
    id_map = dict((l.strip(), i) for (i, l) in enumerate(f))
  cp_values = np.array(list(cp_values_stream(k, ped, id_map)), dtype=k.dtype)
  with open(args.output, "w") as fo:
    cp_values.tofile(fo)
  print "wrote %r" % (args.output,)


if __name__ == "__main__":
  main(sys.argv)

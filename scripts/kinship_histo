#!/usr/bin/env python

# BEGIN_COPYRIGHT
# 
# Copyright (C) 2009-2013 CRS4.
# 
# This file is part of biodoop-core.
# 
# biodoop-core is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
# 
# biodoop-core is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along with
# biodoop-core.  If not, see <http://www.gnu.org/licenses/>.
# 
# END_COPYRIGHT

"""
Plot histogram of kinship values
"""

import sys, argparse

import numpy as np
import matplotlib.pyplot as plt

from bl.core.gt.kinship import KinshipBuilder


def rm_outliers(a, ndev):
  assert isinstance(a, np.ndarray)
  m, s = np.mean(a), np.std(a, ddof=1)
  deltas = np.abs(a - m)
  return a[deltas <= ndev*s]


def plot_histo(in_fn, out_fn, bins, cutoff):
  with open(in_fn) as fi:
    k = KinshipBuilder.deserialize(fi.read())
  k = k[np.nonzero(np.tril(k, -1))]
  if cutoff:
    k = rm_outliers(k, cutoff)
  plt.hist(k, bins=bins)
  plt.savefig(out_fn, dpi=300)


def make_parser():
  parser = argparse.ArgumentParser(description=__doc__.strip())
  parser.add_argument('input', metavar="MATRIX_FILE")
  parser.add_argument("-b", "--bins", type=int, metavar="INT", default=1000,
                      help="number of bins")
  parser.add_argument("-o", "--output", metavar="IMG_FILE",
                      help="output file (extension -> img type)")
  parser.add_argument("--outlier-cutoff", type=float, metavar="N_STDEV",
                      help="max distance from mean, in stdevs")
  return parser


def main(argv):
  parser = make_parser()
  args = parser.parse_args(argv[1:])
  if not args.output:
    args.output = "%s_histo.png" % args.input
  plot_histo(args.input, args.output, args.bins, args.outlier_cutoff)
  print "wrote %r" % (args.output,)


if __name__ == "__main__":
  main(sys.argv)
